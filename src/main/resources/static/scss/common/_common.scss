@charset "utf-8";

@font-face {
  font-family: 'BMJUA';
  src: url('https://cdn.jsdelivr.net/gh/projectnoonnu/noonfonts_one@1.0/BMJUA.woff') format('woff');
  font-weight: normal;
  font-style: normal;
}

$G-numbers-12: (
  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12
);

$G-color-b1: #2C3540;
$G-color-b2: #455D73;
$G-color-b3: #5D84A6;
$G-color-b4: #93AEBF;
$G-color-w1: #DCEAF2;
$G-color-w2: #fbfbfd;

$G-color-arr: (
  'b1': ($G-color-b1),
  'b2': ($G-color-b2),
  'b3': ($G-color-b3),
  'b4': ($G-color-b4),
  'w1': ($G-color-w1),
  'w2': ($G-color-w2),
  'w': white
);

$G-breakpoints: (
  's':  ( min-width:  767px ),
  'm': ( min-width:  992px ),
  'l':  ( min-width: 1200px )
  /*'us':  ( max-width:  767px ),
  'um': ( max-width:  992px ),
  'ul':  ( max-width: 1200px )*/
);

$G-displays: (
  block, none, flex
);

// flex
$G-flex-direction: (
  '-r':  (row),
  '-c':  (column),
  '-rr': (row-reverse),
  '-cr': (column-reverse),
  '':    (row)
);

$G-flex-justify-content: (
  '-cs':  (flex-start),
  '-ce':  (flex-end),
  '-cc':  (center),
  '-cb':  (space-between),
  '-ca':  (space-around),
  '-cv':  (space-evenly),
  '': (flex-start)
);

$G-flex-items: (
  '-ic':  (center),
  '-is':  (flex-start),
  '-ie':  (flex-end),
  '-it':  (stratch),
  '-ib':  (baseline),
  '':  (stratch)
);

$G-flex-wrap: (
  '-wr':  (wrap),
  '': (nowrap)
);

$G-flex-align-content: (
  '-cs':  (flex-start),
  '-ce':  (flex-end),
  '-cc':  (center),
  '-cb':  (space-between),
  '-ca':  (space-around),
  '-cv':  (space-evenly),
  '': (flex-start)
);
// flex end

* {
  font-family: BMJUA, monospace;
  padding: 0;
  margin: 0;
  box-sizing: border-box;
}

button {
  box-sizing: border-box;
  border: 0 none;
  text-align: center;
  background-color: transparent;
}

li {
  list-style: none;
}

a {
  color : $G-color-b1;
  text-decoration: none;
}

.container {
  max-width: 100%;
  padding-right: 1rem;
  padding-left: 1rem;
  margin-right: auto;
  margin-left: auto;
}

// border
@each $key, $value in $G-color-arr {
  @each $key-back, $value-back in $G-color-arr {
    .bor-#{$key}-#{$key-back} {
      border: 1px solid $value;
      border-radius: 0.5rem;
      background: #{$value-back};
      padding: 1rem;
      margin: 1rem;
    }
  }
}

// button
@each $key-text, $value-text in $G-color-arr {
  @each $key-back, $value-back in $G-color-arr {
    @each $key-hover, $value-hover in $G-color-arr {
      .btn-#{$key-text}-#{$key-back}-#{$key-hover} {
        color: #{$value-text};
        background-color: #{$value-back};
        border: 1px solid #{$value-text};
        font-weight: 400;
        text-align: center;
        white-space: nowrap;
        vertical-align: middle;
        cursor: pointer;
        padding: 0.25rem 1rem;
        line-height: 1.25rem;
        border-radius: 4px;

        &:hover {
          background-color: #{$value-hover};
        }
      }
    }
  }
}

.shade-modal {
  display: none;
  position: absolute;
  top: 0;
  left: 0;
  height: 100%;
  width: 100%;
  background: rgba(0, 0, 0, 0.3);
  z-index: 10;
}

.line {
  height: .25rem;
  padding: 0;
  margin: 1.25rem 0;
  background-color: $G-color-b1;
  border: 0;
}

@each $dis in $G-displays {
  .dis-#{$dis} {
    display: $dis;
  }
}

@each $key-al-con, $value-al-con in $G-flex-align-content {
  @each $key-wrap, $value-wrap in $G-flex-wrap {
    @each $key-item, $value-item in $G-flex-items {
      @each $key-con, $value-con in $G-flex-justify-content {
        @each $key-dir, $value-dir in $G-flex-direction {
          .fl#{$key-dir}#{$key-con}#{$key-item}#{$key-wrap}#{$key-al-con} {
            display: flex;
            flex-direction:#{$value-dir};
            justify-content:#{$value-con};
            align-items: #{$value-item};
            flex-wrap: #{$value-wrap};
            align-content: #{$value-al-con};
          }
        }
      }
    }
  }
}

@each $value in $G-numbers-12 {
  .fli-#{$value} { flex: $value;}
}


// reactive
@mixin respond-to($breakpoint) {
  @if map-has-key($G-breakpoints, $breakpoint) {
    @media #{inspect(map-get($G-breakpoints, $breakpoint))} {
      @content;
    }
  }

  @else {
    @warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`. "
        + "Available breakpoints are: #{map-keys($G-breakpoints)}.";
  }
}

@each $key, $value in $G-breakpoints {
  @each $dis in $G-displays {
    .#{$key}-dis-#{$dis} {
      @include respond-to(#{$key}) {
        display: $dis !important;
      }
    }
  }

  @each $key-al-con, $value-al-con in $G-flex-align-content {
    @each $key-wrap, $value-wrap in $G-flex-wrap {
      @each $key-item, $value-item in $G-flex-items {
        @each $key-con, $value-con in $G-flex-justify-content {
          @each $key-dir, $value-dir in $G-flex-direction {
            .#{$key}-fl#{$key-dir}#{$key-con}#{$key-item}#{$key-wrap}#{$key-al-con} {
              @include respond-to(#{$key}) {
                display: flex !important;
                flex-direction: #{$value-dir} !important;
                justify-content: #{$value-con} !important;
                align-items: #{$value-item} !important;
                flex-wrap: #{$value-wrap} !important;
                align-content: #{$value-al-con} !important;
              }
            }
          }
        }
      }
    }
  }

  @each $value in $G-numbers-12 {
    .#{$key}-fli-#{$value} { flex: $value;}
  }

}

// reactive end
